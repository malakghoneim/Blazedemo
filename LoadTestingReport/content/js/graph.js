/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 167.0, "minX": 0.0, "maxY": 8856.0, "series": [{"data": [[0.0, 168.0], [0.1, 170.0], [0.2, 170.0], [0.3, 173.0], [0.4, 174.0], [0.5, 175.0], [0.6, 179.0], [0.7, 180.0], [0.8, 183.0], [0.9, 207.0], [1.0, 258.0], [1.1, 261.0], [1.2, 261.0], [1.3, 262.0], [1.4, 262.0], [1.5, 263.0], [1.6, 265.0], [1.7, 265.0], [1.8, 265.0], [1.9, 266.0], [2.0, 266.0], [2.1, 266.0], [2.2, 266.0], [2.3, 267.0], [2.4, 267.0], [2.5, 267.0], [2.6, 267.0], [2.7, 268.0], [2.8, 268.0], [2.9, 268.0], [3.0, 269.0], [3.1, 269.0], [3.2, 269.0], [3.3, 269.0], [3.4, 269.0], [3.5, 269.0], [3.6, 270.0], [3.7, 270.0], [3.8, 270.0], [3.9, 270.0], [4.0, 270.0], [4.1, 270.0], [4.2, 270.0], [4.3, 271.0], [4.4, 271.0], [4.5, 271.0], [4.6, 271.0], [4.7, 271.0], [4.8, 271.0], [4.9, 272.0], [5.0, 272.0], [5.1, 272.0], [5.2, 272.0], [5.3, 272.0], [5.4, 272.0], [5.5, 273.0], [5.6, 273.0], [5.7, 273.0], [5.8, 273.0], [5.9, 273.0], [6.0, 273.0], [6.1, 273.0], [6.2, 274.0], [6.3, 274.0], [6.4, 274.0], [6.5, 274.0], [6.6, 274.0], [6.7, 274.0], [6.8, 275.0], [6.9, 275.0], [7.0, 275.0], [7.1, 275.0], [7.2, 275.0], [7.3, 275.0], [7.4, 275.0], [7.5, 276.0], [7.6, 276.0], [7.7, 276.0], [7.8, 276.0], [7.9, 276.0], [8.0, 276.0], [8.1, 276.0], [8.2, 277.0], [8.3, 277.0], [8.4, 277.0], [8.5, 277.0], [8.6, 277.0], [8.7, 277.0], [8.8, 277.0], [8.9, 277.0], [9.0, 277.0], [9.1, 277.0], [9.2, 277.0], [9.3, 278.0], [9.4, 278.0], [9.5, 278.0], [9.6, 278.0], [9.7, 278.0], [9.8, 278.0], [9.9, 278.0], [10.0, 278.0], [10.1, 279.0], [10.2, 279.0], [10.3, 279.0], [10.4, 279.0], [10.5, 279.0], [10.6, 279.0], [10.7, 279.0], [10.8, 279.0], [10.9, 279.0], [11.0, 279.0], [11.1, 280.0], [11.2, 280.0], [11.3, 280.0], [11.4, 280.0], [11.5, 280.0], [11.6, 280.0], [11.7, 280.0], [11.8, 280.0], [11.9, 280.0], [12.0, 280.0], [12.1, 281.0], [12.2, 281.0], [12.3, 281.0], [12.4, 281.0], [12.5, 281.0], [12.6, 281.0], [12.7, 281.0], [12.8, 281.0], [12.9, 281.0], [13.0, 281.0], [13.1, 282.0], [13.2, 282.0], [13.3, 282.0], [13.4, 282.0], [13.5, 282.0], [13.6, 282.0], [13.7, 282.0], [13.8, 282.0], [13.9, 282.0], [14.0, 282.0], [14.1, 282.0], [14.2, 282.0], [14.3, 282.0], [14.4, 282.0], [14.5, 282.0], [14.6, 282.0], [14.7, 283.0], [14.8, 283.0], [14.9, 283.0], [15.0, 283.0], [15.1, 283.0], [15.2, 283.0], [15.3, 283.0], [15.4, 283.0], [15.5, 283.0], [15.6, 283.0], [15.7, 283.0], [15.8, 283.0], [15.9, 283.0], [16.0, 283.0], [16.1, 283.0], [16.2, 284.0], [16.3, 284.0], [16.4, 284.0], [16.5, 284.0], [16.6, 284.0], [16.7, 284.0], [16.8, 284.0], [16.9, 284.0], [17.0, 284.0], [17.1, 284.0], [17.2, 284.0], [17.3, 285.0], [17.4, 285.0], [17.5, 285.0], [17.6, 285.0], [17.7, 285.0], [17.8, 285.0], [17.9, 285.0], [18.0, 285.0], [18.1, 285.0], [18.2, 285.0], [18.3, 285.0], [18.4, 286.0], [18.5, 286.0], [18.6, 286.0], [18.7, 286.0], [18.8, 286.0], [18.9, 286.0], [19.0, 286.0], [19.1, 286.0], [19.2, 286.0], [19.3, 287.0], [19.4, 287.0], [19.5, 287.0], [19.6, 287.0], [19.7, 287.0], [19.8, 287.0], [19.9, 287.0], [20.0, 287.0], [20.1, 287.0], [20.2, 287.0], [20.3, 287.0], [20.4, 288.0], [20.5, 288.0], [20.6, 288.0], [20.7, 288.0], [20.8, 288.0], [20.9, 288.0], [21.0, 288.0], [21.1, 288.0], [21.2, 288.0], [21.3, 288.0], [21.4, 288.0], [21.5, 288.0], [21.6, 288.0], [21.7, 288.0], [21.8, 289.0], [21.9, 289.0], [22.0, 289.0], [22.1, 289.0], [22.2, 289.0], [22.3, 289.0], [22.4, 289.0], [22.5, 289.0], [22.6, 289.0], [22.7, 289.0], [22.8, 289.0], [22.9, 290.0], [23.0, 290.0], [23.1, 290.0], [23.2, 290.0], [23.3, 290.0], [23.4, 290.0], [23.5, 290.0], [23.6, 290.0], [23.7, 290.0], [23.8, 291.0], [23.9, 291.0], [24.0, 291.0], [24.1, 291.0], [24.2, 291.0], [24.3, 291.0], [24.4, 291.0], [24.5, 291.0], [24.6, 291.0], [24.7, 291.0], [24.8, 291.0], [24.9, 292.0], [25.0, 292.0], [25.1, 292.0], [25.2, 292.0], [25.3, 292.0], [25.4, 292.0], [25.5, 292.0], [25.6, 292.0], [25.7, 292.0], [25.8, 292.0], [25.9, 292.0], [26.0, 292.0], [26.1, 292.0], [26.2, 292.0], [26.3, 292.0], [26.4, 292.0], [26.5, 292.0], [26.6, 292.0], [26.7, 293.0], [26.8, 293.0], [26.9, 293.0], [27.0, 293.0], [27.1, 293.0], [27.2, 293.0], [27.3, 293.0], [27.4, 293.0], [27.5, 293.0], [27.6, 293.0], [27.7, 294.0], [27.8, 294.0], [27.9, 294.0], [28.0, 294.0], [28.1, 294.0], [28.2, 294.0], [28.3, 294.0], [28.4, 294.0], [28.5, 294.0], [28.6, 294.0], [28.7, 294.0], [28.8, 295.0], [28.9, 295.0], [29.0, 295.0], [29.1, 295.0], [29.2, 295.0], [29.3, 295.0], [29.4, 295.0], [29.5, 295.0], [29.6, 295.0], [29.7, 295.0], [29.8, 295.0], [29.9, 296.0], [30.0, 296.0], [30.1, 296.0], [30.2, 296.0], [30.3, 296.0], [30.4, 296.0], [30.5, 296.0], [30.6, 296.0], [30.7, 296.0], [30.8, 296.0], [30.9, 296.0], [31.0, 297.0], [31.1, 297.0], [31.2, 297.0], [31.3, 297.0], [31.4, 297.0], [31.5, 297.0], [31.6, 297.0], [31.7, 297.0], [31.8, 297.0], [31.9, 297.0], [32.0, 297.0], [32.1, 297.0], [32.2, 297.0], [32.3, 298.0], [32.4, 298.0], [32.5, 298.0], [32.6, 298.0], [32.7, 298.0], [32.8, 298.0], [32.9, 298.0], [33.0, 298.0], [33.1, 298.0], [33.2, 298.0], [33.3, 298.0], [33.4, 298.0], [33.5, 298.0], [33.6, 298.0], [33.7, 299.0], [33.8, 299.0], [33.9, 299.0], [34.0, 299.0], [34.1, 299.0], [34.2, 299.0], [34.3, 299.0], [34.4, 299.0], [34.5, 299.0], [34.6, 299.0], [34.7, 299.0], [34.8, 300.0], [34.9, 300.0], [35.0, 300.0], [35.1, 300.0], [35.2, 300.0], [35.3, 300.0], [35.4, 300.0], [35.5, 300.0], [35.6, 300.0], [35.7, 301.0], [35.8, 301.0], [35.9, 301.0], [36.0, 301.0], [36.1, 301.0], [36.2, 301.0], [36.3, 301.0], [36.4, 301.0], [36.5, 301.0], [36.6, 301.0], [36.7, 301.0], [36.8, 302.0], [36.9, 302.0], [37.0, 302.0], [37.1, 302.0], [37.2, 302.0], [37.3, 302.0], [37.4, 302.0], [37.5, 302.0], [37.6, 302.0], [37.7, 303.0], [37.8, 303.0], [37.9, 303.0], [38.0, 303.0], [38.1, 303.0], [38.2, 303.0], [38.3, 303.0], [38.4, 303.0], [38.5, 304.0], [38.6, 304.0], [38.7, 304.0], [38.8, 304.0], [38.9, 304.0], [39.0, 304.0], [39.1, 304.0], [39.2, 304.0], [39.3, 305.0], [39.4, 305.0], [39.5, 305.0], [39.6, 305.0], [39.7, 305.0], [39.8, 305.0], [39.9, 305.0], [40.0, 305.0], [40.1, 305.0], [40.2, 306.0], [40.3, 306.0], [40.4, 306.0], [40.5, 306.0], [40.6, 306.0], [40.7, 306.0], [40.8, 306.0], [40.9, 306.0], [41.0, 306.0], [41.1, 306.0], [41.2, 306.0], [41.3, 307.0], [41.4, 307.0], [41.5, 307.0], [41.6, 307.0], [41.7, 307.0], [41.8, 307.0], [41.9, 307.0], [42.0, 307.0], [42.1, 307.0], [42.2, 307.0], [42.3, 307.0], [42.4, 308.0], [42.5, 308.0], [42.6, 308.0], [42.7, 308.0], [42.8, 308.0], [42.9, 308.0], [43.0, 308.0], [43.1, 308.0], [43.2, 309.0], [43.3, 309.0], [43.4, 309.0], [43.5, 309.0], [43.6, 309.0], [43.7, 309.0], [43.8, 310.0], [43.9, 310.0], [44.0, 310.0], [44.1, 310.0], [44.2, 310.0], [44.3, 310.0], [44.4, 310.0], [44.5, 310.0], [44.6, 310.0], [44.7, 311.0], [44.8, 311.0], [44.9, 311.0], [45.0, 311.0], [45.1, 311.0], [45.2, 311.0], [45.3, 312.0], [45.4, 312.0], [45.5, 312.0], [45.6, 312.0], [45.7, 312.0], [45.8, 312.0], [45.9, 312.0], [46.0, 313.0], [46.1, 313.0], [46.2, 313.0], [46.3, 313.0], [46.4, 313.0], [46.5, 313.0], [46.6, 314.0], [46.7, 314.0], [46.8, 314.0], [46.9, 314.0], [47.0, 314.0], [47.1, 314.0], [47.2, 315.0], [47.3, 315.0], [47.4, 315.0], [47.5, 315.0], [47.6, 315.0], [47.7, 315.0], [47.8, 315.0], [47.9, 315.0], [48.0, 315.0], [48.1, 316.0], [48.2, 316.0], [48.3, 316.0], [48.4, 316.0], [48.5, 316.0], [48.6, 316.0], [48.7, 316.0], [48.8, 316.0], [48.9, 316.0], [49.0, 317.0], [49.1, 317.0], [49.2, 317.0], [49.3, 317.0], [49.4, 317.0], [49.5, 317.0], [49.6, 317.0], [49.7, 318.0], [49.8, 318.0], [49.9, 318.0], [50.0, 318.0], [50.1, 318.0], [50.2, 318.0], [50.3, 319.0], [50.4, 319.0], [50.5, 319.0], [50.6, 319.0], [50.7, 320.0], [50.8, 320.0], [50.9, 320.0], [51.0, 320.0], [51.1, 320.0], [51.2, 320.0], [51.3, 320.0], [51.4, 320.0], [51.5, 321.0], [51.6, 321.0], [51.7, 321.0], [51.8, 321.0], [51.9, 322.0], [52.0, 322.0], [52.1, 322.0], [52.2, 322.0], [52.3, 322.0], [52.4, 322.0], [52.5, 323.0], [52.6, 323.0], [52.7, 323.0], [52.8, 323.0], [52.9, 323.0], [53.0, 323.0], [53.1, 324.0], [53.2, 324.0], [53.3, 324.0], [53.4, 324.0], [53.5, 324.0], [53.6, 324.0], [53.7, 324.0], [53.8, 325.0], [53.9, 325.0], [54.0, 325.0], [54.1, 325.0], [54.2, 325.0], [54.3, 326.0], [54.4, 326.0], [54.5, 326.0], [54.6, 326.0], [54.7, 326.0], [54.8, 326.0], [54.9, 327.0], [55.0, 327.0], [55.1, 327.0], [55.2, 327.0], [55.3, 327.0], [55.4, 327.0], [55.5, 328.0], [55.6, 328.0], [55.7, 328.0], [55.8, 328.0], [55.9, 328.0], [56.0, 329.0], [56.1, 329.0], [56.2, 329.0], [56.3, 329.0], [56.4, 329.0], [56.5, 329.0], [56.6, 329.0], [56.7, 329.0], [56.8, 329.0], [56.9, 330.0], [57.0, 330.0], [57.1, 330.0], [57.2, 330.0], [57.3, 330.0], [57.4, 331.0], [57.5, 331.0], [57.6, 331.0], [57.7, 331.0], [57.8, 331.0], [57.9, 331.0], [58.0, 331.0], [58.1, 331.0], [58.2, 332.0], [58.3, 332.0], [58.4, 332.0], [58.5, 332.0], [58.6, 332.0], [58.7, 333.0], [58.8, 333.0], [58.9, 333.0], [59.0, 333.0], [59.1, 333.0], [59.2, 334.0], [59.3, 334.0], [59.4, 334.0], [59.5, 335.0], [59.6, 335.0], [59.7, 335.0], [59.8, 336.0], [59.9, 336.0], [60.0, 336.0], [60.1, 336.0], [60.2, 336.0], [60.3, 337.0], [60.4, 337.0], [60.5, 337.0], [60.6, 337.0], [60.7, 337.0], [60.8, 338.0], [60.9, 338.0], [61.0, 338.0], [61.1, 338.0], [61.2, 339.0], [61.3, 339.0], [61.4, 339.0], [61.5, 339.0], [61.6, 339.0], [61.7, 339.0], [61.8, 340.0], [61.9, 340.0], [62.0, 340.0], [62.1, 340.0], [62.2, 341.0], [62.3, 341.0], [62.4, 341.0], [62.5, 341.0], [62.6, 341.0], [62.7, 342.0], [62.8, 342.0], [62.9, 342.0], [63.0, 342.0], [63.1, 343.0], [63.2, 343.0], [63.3, 343.0], [63.4, 344.0], [63.5, 344.0], [63.6, 344.0], [63.7, 344.0], [63.8, 345.0], [63.9, 345.0], [64.0, 345.0], [64.1, 346.0], [64.2, 346.0], [64.3, 346.0], [64.4, 346.0], [64.5, 346.0], [64.6, 347.0], [64.7, 347.0], [64.8, 347.0], [64.9, 347.0], [65.0, 347.0], [65.1, 348.0], [65.2, 348.0], [65.3, 348.0], [65.4, 349.0], [65.5, 349.0], [65.6, 349.0], [65.7, 349.0], [65.8, 349.0], [65.9, 349.0], [66.0, 350.0], [66.1, 350.0], [66.2, 350.0], [66.3, 350.0], [66.4, 351.0], [66.5, 351.0], [66.6, 351.0], [66.7, 351.0], [66.8, 352.0], [66.9, 352.0], [67.0, 352.0], [67.1, 352.0], [67.2, 352.0], [67.3, 353.0], [67.4, 353.0], [67.5, 353.0], [67.6, 353.0], [67.7, 354.0], [67.8, 354.0], [67.9, 354.0], [68.0, 354.0], [68.1, 354.0], [68.2, 354.0], [68.3, 355.0], [68.4, 355.0], [68.5, 355.0], [68.6, 356.0], [68.7, 356.0], [68.8, 356.0], [68.9, 357.0], [69.0, 357.0], [69.1, 357.0], [69.2, 357.0], [69.3, 358.0], [69.4, 358.0], [69.5, 358.0], [69.6, 358.0], [69.7, 359.0], [69.8, 359.0], [69.9, 360.0], [70.0, 360.0], [70.1, 360.0], [70.2, 361.0], [70.3, 362.0], [70.4, 363.0], [70.5, 363.0], [70.6, 363.0], [70.7, 364.0], [70.8, 364.0], [70.9, 365.0], [71.0, 365.0], [71.1, 365.0], [71.2, 366.0], [71.3, 366.0], [71.4, 366.0], [71.5, 366.0], [71.6, 368.0], [71.7, 368.0], [71.8, 369.0], [71.9, 369.0], [72.0, 369.0], [72.1, 370.0], [72.2, 371.0], [72.3, 372.0], [72.4, 372.0], [72.5, 372.0], [72.6, 373.0], [72.7, 374.0], [72.8, 375.0], [72.9, 375.0], [73.0, 375.0], [73.1, 376.0], [73.2, 377.0], [73.3, 377.0], [73.4, 377.0], [73.5, 378.0], [73.6, 378.0], [73.7, 378.0], [73.8, 379.0], [73.9, 379.0], [74.0, 380.0], [74.1, 380.0], [74.2, 380.0], [74.3, 382.0], [74.4, 382.0], [74.5, 383.0], [74.6, 383.0], [74.7, 384.0], [74.8, 385.0], [74.9, 385.0], [75.0, 385.0], [75.1, 388.0], [75.2, 388.0], [75.3, 389.0], [75.4, 390.0], [75.5, 390.0], [75.6, 391.0], [75.7, 391.0], [75.8, 393.0], [75.9, 393.0], [76.0, 393.0], [76.1, 394.0], [76.2, 394.0], [76.3, 395.0], [76.4, 396.0], [76.5, 397.0], [76.6, 400.0], [76.7, 401.0], [76.8, 402.0], [76.9, 402.0], [77.0, 405.0], [77.1, 405.0], [77.2, 405.0], [77.3, 406.0], [77.4, 409.0], [77.5, 410.0], [77.6, 410.0], [77.7, 411.0], [77.8, 412.0], [77.9, 413.0], [78.0, 413.0], [78.1, 414.0], [78.2, 414.0], [78.3, 416.0], [78.4, 421.0], [78.5, 423.0], [78.6, 424.0], [78.7, 425.0], [78.8, 429.0], [78.9, 430.0], [79.0, 430.0], [79.1, 431.0], [79.2, 433.0], [79.3, 434.0], [79.4, 435.0], [79.5, 440.0], [79.6, 441.0], [79.7, 445.0], [79.8, 448.0], [79.9, 449.0], [80.0, 456.0], [80.1, 461.0], [80.2, 463.0], [80.3, 468.0], [80.4, 474.0], [80.5, 476.0], [80.6, 477.0], [80.7, 480.0], [80.8, 489.0], [80.9, 489.0], [81.0, 500.0], [81.1, 506.0], [81.2, 509.0], [81.3, 521.0], [81.4, 548.0], [81.5, 567.0], [81.6, 584.0], [81.7, 586.0], [81.8, 596.0], [81.9, 710.0], [82.0, 762.0], [82.1, 821.0], [82.2, 844.0], [82.3, 850.0], [82.4, 895.0], [82.5, 920.0], [82.6, 931.0], [82.7, 980.0], [82.8, 1045.0], [82.9, 1092.0], [83.0, 1113.0], [83.1, 1158.0], [83.2, 1187.0], [83.3, 1193.0], [83.4, 1234.0], [83.5, 1320.0], [83.6, 1357.0], [83.7, 1439.0], [83.8, 1506.0], [83.9, 1561.0], [84.0, 1670.0], [84.1, 1803.0], [84.2, 1964.0], [84.3, 2199.0], [84.4, 2350.0], [84.5, 2365.0], [84.6, 2396.0], [84.7, 2462.0], [84.8, 2484.0], [84.9, 2562.0], [85.0, 2570.0], [85.1, 2587.0], [85.2, 2614.0], [85.3, 2638.0], [85.4, 2674.0], [85.5, 2699.0], [85.6, 2750.0], [85.7, 2784.0], [85.8, 2798.0], [85.9, 2835.0], [86.0, 2852.0], [86.1, 2885.0], [86.2, 2924.0], [86.3, 2948.0], [86.4, 2992.0], [86.5, 3025.0], [86.6, 3071.0], [86.7, 3116.0], [86.8, 3147.0], [86.9, 3171.0], [87.0, 3183.0], [87.1, 3196.0], [87.2, 3256.0], [87.3, 3289.0], [87.4, 3334.0], [87.5, 3344.0], [87.6, 3367.0], [87.7, 3383.0], [87.8, 3408.0], [87.9, 3505.0], [88.0, 3507.0], [88.1, 3517.0], [88.2, 3529.0], [88.3, 3559.0], [88.4, 3667.0], [88.5, 3680.0], [88.6, 3706.0], [88.7, 3765.0], [88.8, 3790.0], [88.9, 3837.0], [89.0, 3893.0], [89.1, 3980.0], [89.2, 4055.0], [89.3, 4104.0], [89.4, 4174.0], [89.5, 4211.0], [89.6, 4264.0], [89.7, 4298.0], [89.8, 4413.0], [89.9, 4445.0], [90.0, 4491.0], [90.1, 4527.0], [90.2, 4549.0], [90.3, 4606.0], [90.4, 4621.0], [90.5, 4636.0], [90.6, 4645.0], [90.7, 4668.0], [90.8, 4700.0], [90.9, 4708.0], [91.0, 4733.0], [91.1, 4775.0], [91.2, 4781.0], [91.3, 4805.0], [91.4, 4839.0], [91.5, 4848.0], [91.6, 4938.0], [91.7, 4948.0], [91.8, 4972.0], [91.9, 5036.0], [92.0, 5099.0], [92.1, 5127.0], [92.2, 5236.0], [92.3, 5266.0], [92.4, 5302.0], [92.5, 5312.0], [92.6, 5325.0], [92.7, 5384.0], [92.8, 5429.0], [92.9, 5498.0], [93.0, 5565.0], [93.1, 5579.0], [93.2, 5608.0], [93.3, 5624.0], [93.4, 5689.0], [93.5, 5805.0], [93.6, 5819.0], [93.7, 5889.0], [93.8, 5987.0], [93.9, 6043.0], [94.0, 6084.0], [94.1, 6105.0], [94.2, 6127.0], [94.3, 6160.0], [94.4, 6190.0], [94.5, 6196.0], [94.6, 6214.0], [94.7, 6227.0], [94.8, 6248.0], [94.9, 6269.0], [95.0, 6282.0], [95.1, 6291.0], [95.2, 6309.0], [95.3, 6321.0], [95.4, 6327.0], [95.5, 6331.0], [95.6, 6374.0], [95.7, 6406.0], [95.8, 6422.0], [95.9, 6424.0], [96.0, 6441.0], [96.1, 6482.0], [96.2, 6515.0], [96.3, 6541.0], [96.4, 6595.0], [96.5, 6647.0], [96.6, 6751.0], [96.7, 6822.0], [96.8, 6856.0], [96.9, 6892.0], [97.0, 6903.0], [97.1, 7036.0], [97.2, 7157.0], [97.3, 7172.0], [97.4, 7209.0], [97.5, 7217.0], [97.6, 7251.0], [97.7, 7294.0], [97.8, 7295.0], [97.9, 7441.0], [98.0, 7470.0], [98.1, 7522.0], [98.2, 7624.0], [98.3, 7639.0], [98.4, 7740.0], [98.5, 7790.0], [98.6, 7792.0], [98.7, 7848.0], [98.8, 7883.0], [98.9, 7942.0], [99.0, 8005.0], [99.1, 8059.0], [99.2, 8139.0], [99.3, 8172.0], [99.4, 8208.0], [99.5, 8284.0], [99.6, 8303.0], [99.7, 8316.0], [99.8, 8476.0], [99.9, 8501.0]], "isOverall": false, "label": "PuchaseFlight/confirmation.php-313", "isController": false}, {"data": [[0.0, 167.0], [0.1, 168.0], [0.2, 170.0], [0.3, 171.0], [0.4, 171.0], [0.5, 172.0], [0.6, 173.0], [0.7, 174.0], [0.8, 175.0], [0.9, 176.0], [1.0, 179.0], [1.1, 179.0], [1.2, 179.0], [1.3, 182.0], [1.4, 183.0], [1.5, 195.0], [1.6, 203.0], [1.7, 257.0], [1.8, 262.0], [1.9, 263.0], [2.0, 263.0], [2.1, 264.0], [2.2, 264.0], [2.3, 265.0], [2.4, 265.0], [2.5, 266.0], [2.6, 266.0], [2.7, 267.0], [2.8, 267.0], [2.9, 267.0], [3.0, 268.0], [3.1, 268.0], [3.2, 268.0], [3.3, 268.0], [3.4, 269.0], [3.5, 269.0], [3.6, 269.0], [3.7, 269.0], [3.8, 269.0], [3.9, 270.0], [4.0, 270.0], [4.1, 270.0], [4.2, 270.0], [4.3, 270.0], [4.4, 270.0], [4.5, 270.0], [4.6, 271.0], [4.7, 271.0], [4.8, 271.0], [4.9, 271.0], [5.0, 271.0], [5.1, 271.0], [5.2, 271.0], [5.3, 272.0], [5.4, 272.0], [5.5, 272.0], [5.6, 272.0], [5.7, 272.0], [5.8, 272.0], [5.9, 272.0], [6.0, 272.0], [6.1, 273.0], [6.2, 273.0], [6.3, 273.0], [6.4, 273.0], [6.5, 273.0], [6.6, 273.0], [6.7, 273.0], [6.8, 273.0], [6.9, 273.0], [7.0, 273.0], [7.1, 274.0], [7.2, 274.0], [7.3, 274.0], [7.4, 274.0], [7.5, 274.0], [7.6, 274.0], [7.7, 274.0], [7.8, 275.0], [7.9, 275.0], [8.0, 275.0], [8.1, 275.0], [8.2, 275.0], [8.3, 275.0], [8.4, 275.0], [8.5, 275.0], [8.6, 275.0], [8.7, 275.0], [8.8, 275.0], [8.9, 276.0], [9.0, 276.0], [9.1, 276.0], [9.2, 276.0], [9.3, 276.0], [9.4, 276.0], [9.5, 276.0], [9.6, 276.0], [9.7, 276.0], [9.8, 276.0], [9.9, 277.0], [10.0, 277.0], [10.1, 277.0], [10.2, 277.0], [10.3, 277.0], [10.4, 277.0], [10.5, 277.0], [10.6, 277.0], [10.7, 277.0], [10.8, 277.0], [10.9, 278.0], [11.0, 278.0], [11.1, 278.0], [11.2, 278.0], [11.3, 278.0], [11.4, 278.0], [11.5, 278.0], [11.6, 278.0], [11.7, 278.0], [11.8, 278.0], [11.9, 279.0], [12.0, 279.0], [12.1, 279.0], [12.2, 279.0], [12.3, 279.0], [12.4, 279.0], [12.5, 279.0], [12.6, 279.0], [12.7, 279.0], [12.8, 280.0], [12.9, 280.0], [13.0, 280.0], [13.1, 280.0], [13.2, 280.0], [13.3, 280.0], [13.4, 280.0], [13.5, 280.0], [13.6, 280.0], [13.7, 280.0], [13.8, 280.0], [13.9, 280.0], [14.0, 280.0], [14.1, 280.0], [14.2, 281.0], [14.3, 281.0], [14.4, 281.0], [14.5, 281.0], [14.6, 281.0], [14.7, 281.0], [14.8, 281.0], [14.9, 281.0], [15.0, 281.0], [15.1, 281.0], [15.2, 282.0], [15.3, 282.0], [15.4, 282.0], [15.5, 282.0], [15.6, 282.0], [15.7, 282.0], [15.8, 282.0], [15.9, 282.0], [16.0, 282.0], [16.1, 282.0], [16.2, 283.0], [16.3, 283.0], [16.4, 283.0], [16.5, 283.0], [16.6, 283.0], [16.7, 283.0], [16.8, 283.0], [16.9, 283.0], [17.0, 284.0], [17.1, 284.0], [17.2, 284.0], [17.3, 284.0], [17.4, 284.0], [17.5, 284.0], [17.6, 284.0], [17.7, 284.0], [17.8, 284.0], [17.9, 284.0], [18.0, 284.0], [18.1, 285.0], [18.2, 285.0], [18.3, 285.0], [18.4, 285.0], [18.5, 285.0], [18.6, 285.0], [18.7, 285.0], [18.8, 285.0], [18.9, 285.0], [19.0, 285.0], [19.1, 285.0], [19.2, 285.0], [19.3, 285.0], [19.4, 285.0], [19.5, 285.0], [19.6, 286.0], [19.7, 286.0], [19.8, 286.0], [19.9, 286.0], [20.0, 286.0], [20.1, 286.0], [20.2, 286.0], [20.3, 286.0], [20.4, 286.0], [20.5, 286.0], [20.6, 286.0], [20.7, 286.0], [20.8, 286.0], [20.9, 286.0], [21.0, 286.0], [21.1, 286.0], [21.2, 287.0], [21.3, 287.0], [21.4, 287.0], [21.5, 287.0], [21.6, 287.0], [21.7, 287.0], [21.8, 287.0], [21.9, 287.0], [22.0, 287.0], [22.1, 288.0], [22.2, 288.0], [22.3, 288.0], [22.4, 288.0], [22.5, 288.0], [22.6, 288.0], [22.7, 288.0], [22.8, 288.0], [22.9, 288.0], [23.0, 288.0], [23.1, 288.0], [23.2, 289.0], [23.3, 289.0], [23.4, 289.0], [23.5, 289.0], [23.6, 289.0], [23.7, 289.0], [23.8, 289.0], [23.9, 289.0], [24.0, 289.0], [24.1, 289.0], [24.2, 289.0], [24.3, 289.0], [24.4, 289.0], [24.5, 289.0], [24.6, 289.0], [24.7, 289.0], [24.8, 290.0], [24.9, 290.0], [25.0, 290.0], [25.1, 290.0], [25.2, 290.0], [25.3, 290.0], [25.4, 290.0], [25.5, 290.0], [25.6, 290.0], [25.7, 290.0], [25.8, 291.0], [25.9, 291.0], [26.0, 291.0], [26.1, 291.0], [26.2, 291.0], [26.3, 291.0], [26.4, 291.0], [26.5, 291.0], [26.6, 291.0], [26.7, 292.0], [26.8, 292.0], [26.9, 292.0], [27.0, 292.0], [27.1, 292.0], [27.2, 292.0], [27.3, 292.0], [27.4, 292.0], [27.5, 292.0], [27.6, 292.0], [27.7, 292.0], [27.8, 292.0], [27.9, 292.0], [28.0, 293.0], [28.1, 293.0], [28.2, 293.0], [28.3, 293.0], [28.4, 293.0], [28.5, 293.0], [28.6, 293.0], [28.7, 293.0], [28.8, 293.0], [28.9, 293.0], [29.0, 293.0], [29.1, 294.0], [29.2, 294.0], [29.3, 294.0], [29.4, 294.0], [29.5, 294.0], [29.6, 294.0], [29.7, 294.0], [29.8, 294.0], [29.9, 294.0], [30.0, 294.0], [30.1, 295.0], [30.2, 295.0], [30.3, 295.0], [30.4, 295.0], [30.5, 295.0], [30.6, 295.0], [30.7, 295.0], [30.8, 295.0], [30.9, 295.0], [31.0, 295.0], [31.1, 295.0], [31.2, 295.0], [31.3, 296.0], [31.4, 296.0], [31.5, 296.0], [31.6, 296.0], [31.7, 296.0], [31.8, 296.0], [31.9, 296.0], [32.0, 296.0], [32.1, 296.0], [32.2, 296.0], [32.3, 296.0], [32.4, 296.0], [32.5, 297.0], [32.6, 297.0], [32.7, 297.0], [32.8, 297.0], [32.9, 297.0], [33.0, 297.0], [33.1, 297.0], [33.2, 297.0], [33.3, 297.0], [33.4, 298.0], [33.5, 298.0], [33.6, 298.0], [33.7, 298.0], [33.8, 298.0], [33.9, 298.0], [34.0, 298.0], [34.1, 298.0], [34.2, 298.0], [34.3, 298.0], [34.4, 298.0], [34.5, 299.0], [34.6, 299.0], [34.7, 299.0], [34.8, 299.0], [34.9, 299.0], [35.0, 299.0], [35.1, 299.0], [35.2, 299.0], [35.3, 299.0], [35.4, 299.0], [35.5, 300.0], [35.6, 300.0], [35.7, 300.0], [35.8, 300.0], [35.9, 300.0], [36.0, 300.0], [36.1, 300.0], [36.2, 300.0], [36.3, 300.0], [36.4, 300.0], [36.5, 300.0], [36.6, 300.0], [36.7, 300.0], [36.8, 301.0], [36.9, 301.0], [37.0, 301.0], [37.1, 301.0], [37.2, 301.0], [37.3, 301.0], [37.4, 301.0], [37.5, 301.0], [37.6, 301.0], [37.7, 301.0], [37.8, 302.0], [37.9, 302.0], [38.0, 302.0], [38.1, 302.0], [38.2, 302.0], [38.3, 302.0], [38.4, 302.0], [38.5, 302.0], [38.6, 303.0], [38.7, 303.0], [38.8, 303.0], [38.9, 303.0], [39.0, 303.0], [39.1, 303.0], [39.2, 303.0], [39.3, 303.0], [39.4, 303.0], [39.5, 303.0], [39.6, 303.0], [39.7, 304.0], [39.8, 304.0], [39.9, 304.0], [40.0, 304.0], [40.1, 304.0], [40.2, 304.0], [40.3, 304.0], [40.4, 304.0], [40.5, 304.0], [40.6, 304.0], [40.7, 304.0], [40.8, 305.0], [40.9, 305.0], [41.0, 305.0], [41.1, 305.0], [41.2, 305.0], [41.3, 305.0], [41.4, 305.0], [41.5, 305.0], [41.6, 305.0], [41.7, 306.0], [41.8, 306.0], [41.9, 306.0], [42.0, 306.0], [42.1, 306.0], [42.2, 306.0], [42.3, 306.0], [42.4, 306.0], [42.5, 306.0], [42.6, 306.0], [42.7, 306.0], [42.8, 307.0], [42.9, 307.0], [43.0, 307.0], [43.1, 307.0], [43.2, 307.0], [43.3, 307.0], [43.4, 307.0], [43.5, 307.0], [43.6, 307.0], [43.7, 308.0], [43.8, 308.0], [43.9, 308.0], [44.0, 308.0], [44.1, 308.0], [44.2, 309.0], [44.3, 309.0], [44.4, 309.0], [44.5, 309.0], [44.6, 309.0], [44.7, 309.0], [44.8, 309.0], [44.9, 309.0], [45.0, 309.0], [45.1, 310.0], [45.2, 310.0], [45.3, 310.0], [45.4, 310.0], [45.5, 311.0], [45.6, 311.0], [45.7, 311.0], [45.8, 311.0], [45.9, 311.0], [46.0, 311.0], [46.1, 311.0], [46.2, 311.0], [46.3, 311.0], [46.4, 311.0], [46.5, 312.0], [46.6, 312.0], [46.7, 312.0], [46.8, 312.0], [46.9, 312.0], [47.0, 312.0], [47.1, 312.0], [47.2, 312.0], [47.3, 313.0], [47.4, 313.0], [47.5, 313.0], [47.6, 313.0], [47.7, 313.0], [47.8, 313.0], [47.9, 313.0], [48.0, 313.0], [48.1, 314.0], [48.2, 314.0], [48.3, 314.0], [48.4, 314.0], [48.5, 314.0], [48.6, 314.0], [48.7, 314.0], [48.8, 314.0], [48.9, 314.0], [49.0, 315.0], [49.1, 315.0], [49.2, 315.0], [49.3, 315.0], [49.4, 315.0], [49.5, 315.0], [49.6, 315.0], [49.7, 316.0], [49.8, 316.0], [49.9, 316.0], [50.0, 316.0], [50.1, 316.0], [50.2, 317.0], [50.3, 317.0], [50.4, 317.0], [50.5, 317.0], [50.6, 317.0], [50.7, 317.0], [50.8, 317.0], [50.9, 318.0], [51.0, 318.0], [51.1, 318.0], [51.2, 318.0], [51.3, 318.0], [51.4, 318.0], [51.5, 318.0], [51.6, 319.0], [51.7, 319.0], [51.8, 319.0], [51.9, 320.0], [52.0, 320.0], [52.1, 320.0], [52.2, 320.0], [52.3, 320.0], [52.4, 320.0], [52.5, 321.0], [52.6, 321.0], [52.7, 321.0], [52.8, 321.0], [52.9, 321.0], [53.0, 321.0], [53.1, 321.0], [53.2, 321.0], [53.3, 321.0], [53.4, 321.0], [53.5, 322.0], [53.6, 322.0], [53.7, 322.0], [53.8, 322.0], [53.9, 322.0], [54.0, 322.0], [54.1, 323.0], [54.2, 323.0], [54.3, 323.0], [54.4, 323.0], [54.5, 324.0], [54.6, 324.0], [54.7, 324.0], [54.8, 324.0], [54.9, 325.0], [55.0, 325.0], [55.1, 325.0], [55.2, 325.0], [55.3, 325.0], [55.4, 326.0], [55.5, 326.0], [55.6, 326.0], [55.7, 326.0], [55.8, 326.0], [55.9, 326.0], [56.0, 327.0], [56.1, 327.0], [56.2, 327.0], [56.3, 327.0], [56.4, 327.0], [56.5, 327.0], [56.6, 327.0], [56.7, 328.0], [56.8, 328.0], [56.9, 328.0], [57.0, 328.0], [57.1, 328.0], [57.2, 329.0], [57.3, 329.0], [57.4, 329.0], [57.5, 329.0], [57.6, 329.0], [57.7, 330.0], [57.8, 330.0], [57.9, 330.0], [58.0, 330.0], [58.1, 330.0], [58.2, 331.0], [58.3, 331.0], [58.4, 331.0], [58.5, 331.0], [58.6, 331.0], [58.7, 331.0], [58.8, 331.0], [58.9, 332.0], [59.0, 332.0], [59.1, 332.0], [59.2, 332.0], [59.3, 332.0], [59.4, 333.0], [59.5, 333.0], [59.6, 333.0], [59.7, 333.0], [59.8, 333.0], [59.9, 334.0], [60.0, 334.0], [60.1, 334.0], [60.2, 334.0], [60.3, 334.0], [60.4, 335.0], [60.5, 335.0], [60.6, 335.0], [60.7, 335.0], [60.8, 335.0], [60.9, 335.0], [61.0, 335.0], [61.1, 335.0], [61.2, 336.0], [61.3, 336.0], [61.4, 336.0], [61.5, 336.0], [61.6, 336.0], [61.7, 337.0], [61.8, 337.0], [61.9, 337.0], [62.0, 338.0], [62.1, 338.0], [62.2, 338.0], [62.3, 338.0], [62.4, 339.0], [62.5, 339.0], [62.6, 339.0], [62.7, 339.0], [62.8, 339.0], [62.9, 339.0], [63.0, 340.0], [63.1, 340.0], [63.2, 340.0], [63.3, 340.0], [63.4, 340.0], [63.5, 340.0], [63.6, 341.0], [63.7, 341.0], [63.8, 341.0], [63.9, 342.0], [64.0, 342.0], [64.1, 342.0], [64.2, 342.0], [64.3, 343.0], [64.4, 343.0], [64.5, 343.0], [64.6, 344.0], [64.7, 344.0], [64.8, 345.0], [64.9, 345.0], [65.0, 346.0], [65.1, 346.0], [65.2, 346.0], [65.3, 347.0], [65.4, 347.0], [65.5, 347.0], [65.6, 347.0], [65.7, 348.0], [65.8, 348.0], [65.9, 348.0], [66.0, 349.0], [66.1, 349.0], [66.2, 349.0], [66.3, 349.0], [66.4, 349.0], [66.5, 350.0], [66.6, 350.0], [66.7, 351.0], [66.8, 351.0], [66.9, 351.0], [67.0, 351.0], [67.1, 352.0], [67.2, 352.0], [67.3, 352.0], [67.4, 352.0], [67.5, 353.0], [67.6, 353.0], [67.7, 354.0], [67.8, 354.0], [67.9, 354.0], [68.0, 355.0], [68.1, 355.0], [68.2, 355.0], [68.3, 356.0], [68.4, 356.0], [68.5, 356.0], [68.6, 356.0], [68.7, 356.0], [68.8, 357.0], [68.9, 357.0], [69.0, 357.0], [69.1, 358.0], [69.2, 358.0], [69.3, 358.0], [69.4, 359.0], [69.5, 359.0], [69.6, 360.0], [69.7, 360.0], [69.8, 360.0], [69.9, 361.0], [70.0, 362.0], [70.1, 362.0], [70.2, 362.0], [70.3, 362.0], [70.4, 363.0], [70.5, 363.0], [70.6, 363.0], [70.7, 364.0], [70.8, 364.0], [70.9, 364.0], [71.0, 364.0], [71.1, 365.0], [71.2, 365.0], [71.3, 366.0], [71.4, 366.0], [71.5, 367.0], [71.6, 367.0], [71.7, 367.0], [71.8, 368.0], [71.9, 368.0], [72.0, 369.0], [72.1, 369.0], [72.2, 369.0], [72.3, 370.0], [72.4, 370.0], [72.5, 370.0], [72.6, 370.0], [72.7, 371.0], [72.8, 372.0], [72.9, 372.0], [73.0, 373.0], [73.1, 373.0], [73.2, 374.0], [73.3, 374.0], [73.4, 374.0], [73.5, 375.0], [73.6, 376.0], [73.7, 377.0], [73.8, 378.0], [73.9, 378.0], [74.0, 379.0], [74.1, 379.0], [74.2, 380.0], [74.3, 380.0], [74.4, 381.0], [74.5, 381.0], [74.6, 381.0], [74.7, 382.0], [74.8, 382.0], [74.9, 383.0], [75.0, 383.0], [75.1, 383.0], [75.2, 384.0], [75.3, 385.0], [75.4, 386.0], [75.5, 386.0], [75.6, 387.0], [75.7, 387.0], [75.8, 388.0], [75.9, 389.0], [76.0, 390.0], [76.1, 391.0], [76.2, 392.0], [76.3, 393.0], [76.4, 394.0], [76.5, 394.0], [76.6, 394.0], [76.7, 396.0], [76.8, 396.0], [76.9, 398.0], [77.0, 398.0], [77.1, 399.0], [77.2, 400.0], [77.3, 400.0], [77.4, 402.0], [77.5, 402.0], [77.6, 402.0], [77.7, 403.0], [77.8, 404.0], [77.9, 405.0], [78.0, 406.0], [78.1, 406.0], [78.2, 408.0], [78.3, 409.0], [78.4, 410.0], [78.5, 412.0], [78.6, 414.0], [78.7, 415.0], [78.8, 416.0], [78.9, 419.0], [79.0, 419.0], [79.1, 421.0], [79.2, 422.0], [79.3, 423.0], [79.4, 426.0], [79.5, 428.0], [79.6, 431.0], [79.7, 432.0], [79.8, 433.0], [79.9, 435.0], [80.0, 437.0], [80.1, 442.0], [80.2, 445.0], [80.3, 446.0], [80.4, 448.0], [80.5, 449.0], [80.6, 451.0], [80.7, 454.0], [80.8, 456.0], [80.9, 463.0], [81.0, 466.0], [81.1, 469.0], [81.2, 471.0], [81.3, 474.0], [81.4, 477.0], [81.5, 492.0], [81.6, 501.0], [81.7, 502.0], [81.8, 512.0], [81.9, 518.0], [82.0, 529.0], [82.1, 541.0], [82.2, 593.0], [82.3, 626.0], [82.4, 675.0], [82.5, 698.0], [82.6, 737.0], [82.7, 757.0], [82.8, 790.0], [82.9, 796.0], [83.0, 809.0], [83.1, 837.0], [83.2, 847.0], [83.3, 872.0], [83.4, 887.0], [83.5, 900.0], [83.6, 927.0], [83.7, 956.0], [83.8, 971.0], [83.9, 996.0], [84.0, 1106.0], [84.1, 1159.0], [84.2, 1196.0], [84.3, 1276.0], [84.4, 1337.0], [84.5, 1379.0], [84.6, 1387.0], [84.7, 1467.0], [84.8, 1554.0], [84.9, 1585.0], [85.0, 1740.0], [85.1, 1797.0], [85.2, 1909.0], [85.3, 2262.0], [85.4, 2279.0], [85.5, 2335.0], [85.6, 2359.0], [85.7, 2407.0], [85.8, 2423.0], [85.9, 2477.0], [86.0, 2566.0], [86.1, 2595.0], [86.2, 2644.0], [86.3, 2651.0], [86.4, 2687.0], [86.5, 2710.0], [86.6, 2728.0], [86.7, 2754.0], [86.8, 2764.0], [86.9, 2800.0], [87.0, 2817.0], [87.1, 2856.0], [87.2, 2906.0], [87.3, 2924.0], [87.4, 2955.0], [87.5, 3024.0], [87.6, 3093.0], [87.7, 3118.0], [87.8, 3126.0], [87.9, 3170.0], [88.0, 3190.0], [88.1, 3202.0], [88.2, 3254.0], [88.3, 3265.0], [88.4, 3313.0], [88.5, 3342.0], [88.6, 3365.0], [88.7, 3380.0], [88.8, 3384.0], [88.9, 3429.0], [89.0, 3444.0], [89.1, 3481.0], [89.2, 3496.0], [89.3, 3559.0], [89.4, 3595.0], [89.5, 3699.0], [89.6, 3829.0], [89.7, 3936.0], [89.8, 4184.0], [89.9, 4224.0], [90.0, 4260.0], [90.1, 4294.0], [90.2, 4331.0], [90.3, 4471.0], [90.4, 4492.0], [90.5, 4540.0], [90.6, 4575.0], [90.7, 4608.0], [90.8, 4638.0], [90.9, 4657.0], [91.0, 4671.0], [91.1, 4707.0], [91.2, 4732.0], [91.3, 4818.0], [91.4, 4831.0], [91.5, 4904.0], [91.6, 4933.0], [91.7, 4933.0], [91.8, 4953.0], [91.9, 4975.0], [92.0, 5071.0], [92.1, 5125.0], [92.2, 5159.0], [92.3, 5222.0], [92.4, 5252.0], [92.5, 5338.0], [92.6, 5344.0], [92.7, 5352.0], [92.8, 5376.0], [92.9, 5411.0], [93.0, 5445.0], [93.1, 5450.0], [93.2, 5538.0], [93.3, 5578.0], [93.4, 5654.0], [93.5, 5688.0], [93.6, 5724.0], [93.7, 5787.0], [93.8, 5804.0], [93.9, 5814.0], [94.0, 5822.0], [94.1, 5824.0], [94.2, 5854.0], [94.3, 5858.0], [94.4, 5884.0], [94.5, 5903.0], [94.6, 5932.0], [94.7, 5948.0], [94.8, 5954.0], [94.9, 6097.0], [95.0, 6134.0], [95.1, 6149.0], [95.2, 6207.0], [95.3, 6211.0], [95.4, 6249.0], [95.5, 6276.0], [95.6, 6291.0], [95.7, 6343.0], [95.8, 6369.0], [95.9, 6394.0], [96.0, 6470.0], [96.1, 6496.0], [96.2, 6525.0], [96.3, 6568.0], [96.4, 6595.0], [96.5, 6618.0], [96.6, 6667.0], [96.7, 6756.0], [96.8, 6830.0], [96.9, 6931.0], [97.0, 6988.0], [97.1, 7061.0], [97.2, 7088.0], [97.3, 7164.0], [97.4, 7219.0], [97.5, 7261.0], [97.6, 7305.0], [97.7, 7355.0], [97.8, 7418.0], [97.9, 7443.0], [98.0, 7472.0], [98.1, 7531.0], [98.2, 7562.0], [98.3, 7674.0], [98.4, 7693.0], [98.5, 7716.0], [98.6, 7748.0], [98.7, 7773.0], [98.8, 7828.0], [98.9, 7847.0], [99.0, 7882.0], [99.1, 8022.0], [99.2, 8054.0], [99.3, 8137.0], [99.4, 8145.0], [99.5, 8211.0], [99.6, 8358.0], [99.7, 8404.0], [99.8, 8449.0], [99.9, 8455.0]], "isOverall": false, "label": "ChooseFlight/purchase.php-237", "isController": false}, {"data": [[0.0, 275.0], [0.1, 279.0], [0.2, 280.0], [0.3, 281.0], [0.4, 284.0], [0.5, 293.0], [0.6, 295.0], [0.7, 299.0], [0.8, 302.0], [0.9, 306.0], [1.0, 307.0], [1.1, 310.0], [1.2, 321.0], [1.3, 322.0], [1.4, 353.0], [1.5, 365.0], [1.6, 367.0], [1.7, 369.0], [1.8, 370.0], [1.9, 371.0], [2.0, 371.0], [2.1, 371.0], [2.2, 372.0], [2.3, 373.0], [2.4, 374.0], [2.5, 374.0], [2.6, 374.0], [2.7, 374.0], [2.8, 374.0], [2.9, 376.0], [3.0, 376.0], [3.1, 377.0], [3.2, 377.0], [3.3, 377.0], [3.4, 378.0], [3.5, 378.0], [3.6, 379.0], [3.7, 379.0], [3.8, 379.0], [3.9, 379.0], [4.0, 380.0], [4.1, 380.0], [4.2, 380.0], [4.3, 380.0], [4.4, 380.0], [4.5, 381.0], [4.6, 381.0], [4.7, 381.0], [4.8, 381.0], [4.9, 381.0], [5.0, 381.0], [5.1, 382.0], [5.2, 382.0], [5.3, 382.0], [5.4, 383.0], [5.5, 383.0], [5.6, 383.0], [5.7, 383.0], [5.8, 383.0], [5.9, 383.0], [6.0, 384.0], [6.1, 384.0], [6.2, 385.0], [6.3, 385.0], [6.4, 385.0], [6.5, 385.0], [6.6, 385.0], [6.7, 386.0], [6.8, 386.0], [6.9, 386.0], [7.0, 386.0], [7.1, 386.0], [7.2, 386.0], [7.3, 387.0], [7.4, 387.0], [7.5, 387.0], [7.6, 387.0], [7.7, 388.0], [7.8, 388.0], [7.9, 388.0], [8.0, 388.0], [8.1, 388.0], [8.2, 388.0], [8.3, 389.0], [8.4, 389.0], [8.5, 389.0], [8.6, 389.0], [8.7, 389.0], [8.8, 389.0], [8.9, 390.0], [9.0, 390.0], [9.1, 390.0], [9.2, 390.0], [9.3, 390.0], [9.4, 390.0], [9.5, 391.0], [9.6, 391.0], [9.7, 391.0], [9.8, 391.0], [9.9, 392.0], [10.0, 392.0], [10.1, 392.0], [10.2, 392.0], [10.3, 392.0], [10.4, 392.0], [10.5, 392.0], [10.6, 392.0], [10.7, 392.0], [10.8, 393.0], [10.9, 393.0], [11.0, 393.0], [11.1, 393.0], [11.2, 393.0], [11.3, 393.0], [11.4, 394.0], [11.5, 394.0], [11.6, 394.0], [11.7, 394.0], [11.8, 394.0], [11.9, 394.0], [12.0, 394.0], [12.1, 395.0], [12.2, 395.0], [12.3, 395.0], [12.4, 395.0], [12.5, 395.0], [12.6, 395.0], [12.7, 395.0], [12.8, 395.0], [12.9, 395.0], [13.0, 395.0], [13.1, 395.0], [13.2, 395.0], [13.3, 395.0], [13.4, 396.0], [13.5, 396.0], [13.6, 396.0], [13.7, 396.0], [13.8, 396.0], [13.9, 396.0], [14.0, 396.0], [14.1, 397.0], [14.2, 397.0], [14.3, 397.0], [14.4, 397.0], [14.5, 397.0], [14.6, 397.0], [14.7, 397.0], [14.8, 397.0], [14.9, 397.0], [15.0, 397.0], [15.1, 397.0], [15.2, 398.0], [15.3, 398.0], [15.4, 398.0], [15.5, 398.0], [15.6, 398.0], [15.7, 398.0], [15.8, 398.0], [15.9, 399.0], [16.0, 399.0], [16.1, 399.0], [16.2, 399.0], [16.3, 399.0], [16.4, 399.0], [16.5, 399.0], [16.6, 399.0], [16.7, 399.0], [16.8, 400.0], [16.9, 400.0], [17.0, 400.0], [17.1, 400.0], [17.2, 400.0], [17.3, 400.0], [17.4, 400.0], [17.5, 400.0], [17.6, 400.0], [17.7, 400.0], [17.8, 401.0], [17.9, 401.0], [18.0, 401.0], [18.1, 401.0], [18.2, 401.0], [18.3, 401.0], [18.4, 401.0], [18.5, 401.0], [18.6, 401.0], [18.7, 401.0], [18.8, 401.0], [18.9, 402.0], [19.0, 402.0], [19.1, 402.0], [19.2, 402.0], [19.3, 402.0], [19.4, 402.0], [19.5, 402.0], [19.6, 402.0], [19.7, 402.0], [19.8, 402.0], [19.9, 403.0], [20.0, 403.0], [20.1, 403.0], [20.2, 403.0], [20.3, 403.0], [20.4, 403.0], [20.5, 403.0], [20.6, 403.0], [20.7, 403.0], [20.8, 403.0], [20.9, 403.0], [21.0, 403.0], [21.1, 404.0], [21.2, 404.0], [21.3, 404.0], [21.4, 404.0], [21.5, 404.0], [21.6, 404.0], [21.7, 404.0], [21.8, 404.0], [21.9, 404.0], [22.0, 404.0], [22.1, 404.0], [22.2, 405.0], [22.3, 405.0], [22.4, 405.0], [22.5, 405.0], [22.6, 405.0], [22.7, 405.0], [22.8, 405.0], [22.9, 405.0], [23.0, 405.0], [23.1, 405.0], [23.2, 406.0], [23.3, 406.0], [23.4, 406.0], [23.5, 406.0], [23.6, 406.0], [23.7, 406.0], [23.8, 406.0], [23.9, 406.0], [24.0, 406.0], [24.1, 407.0], [24.2, 407.0], [24.3, 407.0], [24.4, 407.0], [24.5, 407.0], [24.6, 407.0], [24.7, 407.0], [24.8, 407.0], [24.9, 407.0], [25.0, 407.0], [25.1, 408.0], [25.2, 408.0], [25.3, 408.0], [25.4, 408.0], [25.5, 408.0], [25.6, 408.0], [25.7, 408.0], [25.8, 408.0], [25.9, 408.0], [26.0, 408.0], [26.1, 409.0], [26.2, 409.0], [26.3, 409.0], [26.4, 409.0], [26.5, 409.0], [26.6, 409.0], [26.7, 409.0], [26.8, 409.0], [26.9, 409.0], [27.0, 410.0], [27.1, 410.0], [27.2, 410.0], [27.3, 410.0], [27.4, 410.0], [27.5, 410.0], [27.6, 410.0], [27.7, 410.0], [27.8, 410.0], [27.9, 410.0], [28.0, 411.0], [28.1, 411.0], [28.2, 411.0], [28.3, 411.0], [28.4, 411.0], [28.5, 411.0], [28.6, 411.0], [28.7, 411.0], [28.8, 411.0], [28.9, 412.0], [29.0, 412.0], [29.1, 412.0], [29.2, 412.0], [29.3, 412.0], [29.4, 412.0], [29.5, 412.0], [29.6, 412.0], [29.7, 413.0], [29.8, 413.0], [29.9, 413.0], [30.0, 413.0], [30.1, 413.0], [30.2, 413.0], [30.3, 413.0], [30.4, 413.0], [30.5, 413.0], [30.6, 414.0], [30.7, 414.0], [30.8, 414.0], [30.9, 414.0], [31.0, 414.0], [31.1, 414.0], [31.2, 414.0], [31.3, 414.0], [31.4, 414.0], [31.5, 414.0], [31.6, 415.0], [31.7, 415.0], [31.8, 415.0], [31.9, 415.0], [32.0, 415.0], [32.1, 415.0], [32.2, 415.0], [32.3, 415.0], [32.4, 416.0], [32.5, 416.0], [32.6, 416.0], [32.7, 416.0], [32.8, 416.0], [32.9, 416.0], [33.0, 416.0], [33.1, 416.0], [33.2, 417.0], [33.3, 417.0], [33.4, 417.0], [33.5, 417.0], [33.6, 417.0], [33.7, 418.0], [33.8, 418.0], [33.9, 418.0], [34.0, 418.0], [34.1, 418.0], [34.2, 418.0], [34.3, 418.0], [34.4, 418.0], [34.5, 419.0], [34.6, 419.0], [34.7, 419.0], [34.8, 419.0], [34.9, 419.0], [35.0, 419.0], [35.1, 419.0], [35.2, 419.0], [35.3, 420.0], [35.4, 420.0], [35.5, 420.0], [35.6, 420.0], [35.7, 420.0], [35.8, 420.0], [35.9, 420.0], [36.0, 421.0], [36.1, 421.0], [36.2, 421.0], [36.3, 421.0], [36.4, 421.0], [36.5, 421.0], [36.6, 421.0], [36.7, 421.0], [36.8, 421.0], [36.9, 421.0], [37.0, 421.0], [37.1, 421.0], [37.2, 421.0], [37.3, 422.0], [37.4, 422.0], [37.5, 422.0], [37.6, 422.0], [37.7, 422.0], [37.8, 422.0], [37.9, 422.0], [38.0, 422.0], [38.1, 422.0], [38.2, 422.0], [38.3, 422.0], [38.4, 423.0], [38.5, 423.0], [38.6, 423.0], [38.7, 423.0], [38.8, 423.0], [38.9, 423.0], [39.0, 423.0], [39.1, 423.0], [39.2, 424.0], [39.3, 424.0], [39.4, 424.0], [39.5, 424.0], [39.6, 424.0], [39.7, 424.0], [39.8, 425.0], [39.9, 425.0], [40.0, 425.0], [40.1, 425.0], [40.2, 425.0], [40.3, 425.0], [40.4, 425.0], [40.5, 425.0], [40.6, 426.0], [40.7, 426.0], [40.8, 426.0], [40.9, 426.0], [41.0, 426.0], [41.1, 426.0], [41.2, 426.0], [41.3, 427.0], [41.4, 427.0], [41.5, 427.0], [41.6, 427.0], [41.7, 427.0], [41.8, 427.0], [41.9, 427.0], [42.0, 427.0], [42.1, 427.0], [42.2, 428.0], [42.3, 428.0], [42.4, 428.0], [42.5, 428.0], [42.6, 428.0], [42.7, 428.0], [42.8, 428.0], [42.9, 429.0], [43.0, 429.0], [43.1, 429.0], [43.2, 429.0], [43.3, 429.0], [43.4, 429.0], [43.5, 429.0], [43.6, 429.0], [43.7, 430.0], [43.8, 430.0], [43.9, 430.0], [44.0, 430.0], [44.1, 430.0], [44.2, 430.0], [44.3, 430.0], [44.4, 431.0], [44.5, 431.0], [44.6, 431.0], [44.7, 431.0], [44.8, 432.0], [44.9, 432.0], [45.0, 432.0], [45.1, 432.0], [45.2, 432.0], [45.3, 432.0], [45.4, 432.0], [45.5, 432.0], [45.6, 432.0], [45.7, 433.0], [45.8, 433.0], [45.9, 433.0], [46.0, 433.0], [46.1, 433.0], [46.2, 433.0], [46.3, 433.0], [46.4, 434.0], [46.5, 434.0], [46.6, 434.0], [46.7, 434.0], [46.8, 434.0], [46.9, 434.0], [47.0, 435.0], [47.1, 435.0], [47.2, 435.0], [47.3, 436.0], [47.4, 436.0], [47.5, 436.0], [47.6, 436.0], [47.7, 436.0], [47.8, 436.0], [47.9, 436.0], [48.0, 436.0], [48.1, 436.0], [48.2, 437.0], [48.3, 437.0], [48.4, 437.0], [48.5, 437.0], [48.6, 438.0], [48.7, 438.0], [48.8, 438.0], [48.9, 438.0], [49.0, 438.0], [49.1, 438.0], [49.2, 438.0], [49.3, 439.0], [49.4, 439.0], [49.5, 439.0], [49.6, 439.0], [49.7, 439.0], [49.8, 439.0], [49.9, 439.0], [50.0, 439.0], [50.1, 439.0], [50.2, 440.0], [50.3, 440.0], [50.4, 440.0], [50.5, 440.0], [50.6, 440.0], [50.7, 440.0], [50.8, 440.0], [50.9, 441.0], [51.0, 441.0], [51.1, 441.0], [51.2, 441.0], [51.3, 442.0], [51.4, 442.0], [51.5, 442.0], [51.6, 442.0], [51.7, 442.0], [51.8, 442.0], [51.9, 443.0], [52.0, 443.0], [52.1, 443.0], [52.2, 443.0], [52.3, 443.0], [52.4, 443.0], [52.5, 443.0], [52.6, 444.0], [52.7, 444.0], [52.8, 444.0], [52.9, 444.0], [53.0, 444.0], [53.1, 444.0], [53.2, 444.0], [53.3, 445.0], [53.4, 445.0], [53.5, 445.0], [53.6, 445.0], [53.7, 445.0], [53.8, 445.0], [53.9, 446.0], [54.0, 446.0], [54.1, 446.0], [54.2, 446.0], [54.3, 446.0], [54.4, 446.0], [54.5, 446.0], [54.6, 447.0], [54.7, 447.0], [54.8, 447.0], [54.9, 447.0], [55.0, 447.0], [55.1, 447.0], [55.2, 447.0], [55.3, 448.0], [55.4, 448.0], [55.5, 448.0], [55.6, 448.0], [55.7, 448.0], [55.8, 448.0], [55.9, 449.0], [56.0, 449.0], [56.1, 449.0], [56.2, 449.0], [56.3, 449.0], [56.4, 449.0], [56.5, 449.0], [56.6, 449.0], [56.7, 449.0], [56.8, 450.0], [56.9, 450.0], [57.0, 450.0], [57.1, 450.0], [57.2, 451.0], [57.3, 451.0], [57.4, 451.0], [57.5, 451.0], [57.6, 451.0], [57.7, 451.0], [57.8, 451.0], [57.9, 452.0], [58.0, 452.0], [58.1, 452.0], [58.2, 452.0], [58.3, 452.0], [58.4, 453.0], [58.5, 453.0], [58.6, 453.0], [58.7, 453.0], [58.8, 453.0], [58.9, 454.0], [59.0, 454.0], [59.1, 454.0], [59.2, 455.0], [59.3, 455.0], [59.4, 455.0], [59.5, 455.0], [59.6, 455.0], [59.7, 455.0], [59.8, 456.0], [59.9, 456.0], [60.0, 456.0], [60.1, 456.0], [60.2, 456.0], [60.3, 456.0], [60.4, 457.0], [60.5, 457.0], [60.6, 458.0], [60.7, 458.0], [60.8, 458.0], [60.9, 458.0], [61.0, 458.0], [61.1, 458.0], [61.2, 459.0], [61.3, 459.0], [61.4, 459.0], [61.5, 459.0], [61.6, 459.0], [61.7, 459.0], [61.8, 459.0], [61.9, 460.0], [62.0, 460.0], [62.1, 460.0], [62.2, 460.0], [62.3, 461.0], [62.4, 461.0], [62.5, 462.0], [62.6, 462.0], [62.7, 462.0], [62.8, 462.0], [62.9, 462.0], [63.0, 463.0], [63.1, 463.0], [63.2, 463.0], [63.3, 463.0], [63.4, 463.0], [63.5, 464.0], [63.6, 464.0], [63.7, 464.0], [63.8, 464.0], [63.9, 465.0], [64.0, 465.0], [64.1, 465.0], [64.2, 466.0], [64.3, 466.0], [64.4, 466.0], [64.5, 466.0], [64.6, 466.0], [64.7, 467.0], [64.8, 467.0], [64.9, 467.0], [65.0, 467.0], [65.1, 467.0], [65.2, 467.0], [65.3, 468.0], [65.4, 468.0], [65.5, 468.0], [65.6, 468.0], [65.7, 468.0], [65.8, 469.0], [65.9, 469.0], [66.0, 469.0], [66.1, 469.0], [66.2, 470.0], [66.3, 470.0], [66.4, 470.0], [66.5, 470.0], [66.6, 470.0], [66.7, 470.0], [66.8, 470.0], [66.9, 470.0], [67.0, 471.0], [67.1, 471.0], [67.2, 471.0], [67.3, 472.0], [67.4, 472.0], [67.5, 472.0], [67.6, 473.0], [67.7, 473.0], [67.8, 473.0], [67.9, 473.0], [68.0, 473.0], [68.1, 474.0], [68.2, 474.0], [68.3, 474.0], [68.4, 474.0], [68.5, 475.0], [68.6, 475.0], [68.7, 476.0], [68.8, 476.0], [68.9, 476.0], [69.0, 476.0], [69.1, 477.0], [69.2, 477.0], [69.3, 477.0], [69.4, 478.0], [69.5, 478.0], [69.6, 478.0], [69.7, 478.0], [69.8, 479.0], [69.9, 479.0], [70.0, 479.0], [70.1, 480.0], [70.2, 480.0], [70.3, 481.0], [70.4, 481.0], [70.5, 481.0], [70.6, 481.0], [70.7, 482.0], [70.8, 482.0], [70.9, 482.0], [71.0, 483.0], [71.1, 483.0], [71.2, 483.0], [71.3, 484.0], [71.4, 484.0], [71.5, 484.0], [71.6, 485.0], [71.7, 485.0], [71.8, 486.0], [71.9, 486.0], [72.0, 486.0], [72.1, 487.0], [72.2, 488.0], [72.3, 488.0], [72.4, 488.0], [72.5, 488.0], [72.6, 490.0], [72.7, 490.0], [72.8, 491.0], [72.9, 492.0], [73.0, 492.0], [73.1, 493.0], [73.2, 493.0], [73.3, 494.0], [73.4, 495.0], [73.5, 496.0], [73.6, 496.0], [73.7, 497.0], [73.8, 497.0], [73.9, 498.0], [74.0, 498.0], [74.1, 498.0], [74.2, 499.0], [74.3, 500.0], [74.4, 500.0], [74.5, 501.0], [74.6, 503.0], [74.7, 504.0], [74.8, 504.0], [74.9, 504.0], [75.0, 505.0], [75.1, 505.0], [75.2, 507.0], [75.3, 508.0], [75.4, 510.0], [75.5, 510.0], [75.6, 511.0], [75.7, 511.0], [75.8, 511.0], [75.9, 512.0], [76.0, 513.0], [76.1, 514.0], [76.2, 514.0], [76.3, 516.0], [76.4, 516.0], [76.5, 518.0], [76.6, 518.0], [76.7, 518.0], [76.8, 519.0], [76.9, 520.0], [77.0, 521.0], [77.1, 522.0], [77.2, 523.0], [77.3, 523.0], [77.4, 525.0], [77.5, 525.0], [77.6, 526.0], [77.7, 528.0], [77.8, 529.0], [77.9, 529.0], [78.0, 530.0], [78.1, 532.0], [78.2, 533.0], [78.3, 534.0], [78.4, 534.0], [78.5, 534.0], [78.6, 537.0], [78.7, 539.0], [78.8, 540.0], [78.9, 541.0], [79.0, 543.0], [79.1, 544.0], [79.2, 547.0], [79.3, 548.0], [79.4, 549.0], [79.5, 550.0], [79.6, 550.0], [79.7, 554.0], [79.8, 555.0], [79.9, 559.0], [80.0, 564.0], [80.1, 567.0], [80.2, 569.0], [80.3, 578.0], [80.4, 586.0], [80.5, 588.0], [80.6, 590.0], [80.7, 592.0], [80.8, 599.0], [80.9, 601.0], [81.0, 607.0], [81.1, 608.0], [81.2, 617.0], [81.3, 620.0], [81.4, 630.0], [81.5, 638.0], [81.6, 653.0], [81.7, 677.0], [81.8, 687.0], [81.9, 738.0], [82.0, 745.0], [82.1, 764.0], [82.2, 776.0], [82.3, 817.0], [82.4, 829.0], [82.5, 838.0], [82.6, 841.0], [82.7, 899.0], [82.8, 920.0], [82.9, 966.0], [83.0, 1004.0], [83.1, 1020.0], [83.2, 1035.0], [83.3, 1067.0], [83.4, 1196.0], [83.5, 1232.0], [83.6, 1285.0], [83.7, 1321.0], [83.8, 1338.0], [83.9, 1356.0], [84.0, 1380.0], [84.1, 1440.0], [84.2, 1479.0], [84.3, 1534.0], [84.4, 1710.0], [84.5, 1835.0], [84.6, 1955.0], [84.7, 2089.0], [84.8, 2154.0], [84.9, 2254.0], [85.0, 2311.0], [85.1, 2426.0], [85.2, 2488.0], [85.3, 2536.0], [85.4, 2576.0], [85.5, 2582.0], [85.6, 2611.0], [85.7, 2631.0], [85.8, 2665.0], [85.9, 2719.0], [86.0, 2767.0], [86.1, 2796.0], [86.2, 2825.0], [86.3, 2848.0], [86.4, 2871.0], [86.5, 2896.0], [86.6, 2917.0], [86.7, 2983.0], [86.8, 3019.0], [86.9, 3021.0], [87.0, 3040.0], [87.1, 3094.0], [87.2, 3149.0], [87.3, 3225.0], [87.4, 3261.0], [87.5, 3292.0], [87.6, 3341.0], [87.7, 3371.0], [87.8, 3378.0], [87.9, 3405.0], [88.0, 3457.0], [88.1, 3514.0], [88.2, 3520.0], [88.3, 3535.0], [88.4, 3542.0], [88.5, 3589.0], [88.6, 3616.0], [88.7, 3635.0], [88.8, 3668.0], [88.9, 3698.0], [89.0, 3730.0], [89.1, 3745.0], [89.2, 3769.0], [89.3, 3840.0], [89.4, 3872.0], [89.5, 3926.0], [89.6, 4056.0], [89.7, 4135.0], [89.8, 4166.0], [89.9, 4384.0], [90.0, 4424.0], [90.1, 4458.0], [90.2, 4475.0], [90.3, 4580.0], [90.4, 4642.0], [90.5, 4670.0], [90.6, 4725.0], [90.7, 4766.0], [90.8, 4798.0], [90.9, 4840.0], [91.0, 4861.0], [91.1, 4881.0], [91.2, 4942.0], [91.3, 4973.0], [91.4, 5069.0], [91.5, 5082.0], [91.6, 5134.0], [91.7, 5161.0], [91.8, 5188.0], [91.9, 5222.0], [92.0, 5246.0], [92.1, 5255.0], [92.2, 5275.0], [92.3, 5310.0], [92.4, 5324.0], [92.5, 5371.0], [92.6, 5387.0], [92.7, 5402.0], [92.8, 5443.0], [92.9, 5457.0], [93.0, 5507.0], [93.1, 5531.0], [93.2, 5603.0], [93.3, 5624.0], [93.4, 5676.0], [93.5, 5724.0], [93.6, 5746.0], [93.7, 5762.0], [93.8, 5875.0], [93.9, 5893.0], [94.0, 5923.0], [94.1, 5997.0], [94.2, 6046.0], [94.3, 6079.0], [94.4, 6127.0], [94.5, 6233.0], [94.6, 6249.0], [94.7, 6328.0], [94.8, 6344.0], [94.9, 6355.0], [95.0, 6380.0], [95.1, 6418.0], [95.2, 6436.0], [95.3, 6448.0], [95.4, 6471.0], [95.5, 6504.0], [95.6, 6552.0], [95.7, 6581.0], [95.8, 6636.0], [95.9, 6660.0], [96.0, 6681.0], [96.1, 6721.0], [96.2, 6767.0], [96.3, 6802.0], [96.4, 6844.0], [96.5, 6864.0], [96.6, 6880.0], [96.7, 6918.0], [96.8, 6971.0], [96.9, 6991.0], [97.0, 7015.0], [97.1, 7020.0], [97.2, 7058.0], [97.3, 7124.0], [97.4, 7154.0], [97.5, 7180.0], [97.6, 7265.0], [97.7, 7290.0], [97.8, 7354.0], [97.9, 7372.0], [98.0, 7410.0], [98.1, 7465.0], [98.2, 7512.0], [98.3, 7619.0], [98.4, 7677.0], [98.5, 7755.0], [98.6, 7811.0], [98.7, 7844.0], [98.8, 7957.0], [98.9, 8049.0], [99.0, 8062.0], [99.1, 8102.0], [99.2, 8155.0], [99.3, 8167.0], [99.4, 8295.0], [99.5, 8396.0], [99.6, 8450.0], [99.7, 8491.0], [99.8, 8568.0], [99.9, 8585.0]], "isOverall": false, "label": "FindFlights/reserve.php-230", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 1411.0, "series": [{"data": [[600.0, 2.0], [700.0, 4.0], [800.0, 9.0], [900.0, 8.0], [1000.0, 5.0], [1100.0, 8.0], [1200.0, 4.0], [1300.0, 4.0], [1400.0, 3.0], [1500.0, 4.0], [1600.0, 2.0], [1700.0, 1.0], [1800.0, 2.0], [1900.0, 1.0], [2100.0, 3.0], [2200.0, 1.0], [2300.0, 6.0], [2400.0, 5.0], [2500.0, 8.0], [2600.0, 8.0], [2700.0, 8.0], [2800.0, 8.0], [2900.0, 6.0], [3000.0, 6.0], [3100.0, 10.0], [3200.0, 5.0], [3300.0, 11.0], [3400.0, 3.0], [3500.0, 11.0], [3700.0, 6.0], [3600.0, 5.0], [3800.0, 5.0], [3900.0, 3.0], [4000.0, 3.0], [4200.0, 5.0], [4100.0, 5.0], [4300.0, 2.0], [4400.0, 6.0], [4600.0, 12.0], [4500.0, 6.0], [4700.0, 10.0], [4800.0, 9.0], [5000.0, 4.0], [5100.0, 3.0], [4900.0, 6.0], [5200.0, 6.0], [5300.0, 8.0], [5400.0, 5.0], [5500.0, 6.0], [5600.0, 5.0], [5800.0, 6.0], [5700.0, 2.0], [6100.0, 11.0], [6000.0, 6.0], [5900.0, 2.0], [6200.0, 15.0], [6300.0, 12.0], [6400.0, 12.0], [6500.0, 6.0], [6600.0, 2.0], [6900.0, 1.0], [6800.0, 7.0], [6700.0, 4.0], [7100.0, 6.0], [7000.0, 3.0], [7200.0, 10.0], [7400.0, 5.0], [7300.0, 1.0], [7600.0, 4.0], [7500.0, 3.0], [7700.0, 6.0], [7900.0, 3.0], [7800.0, 5.0], [8000.0, 5.0], [8100.0, 5.0], [8200.0, 4.0], [8400.0, 3.0], [8300.0, 5.0], [8500.0, 1.0], [8600.0, 1.0], [8800.0, 1.0], [100.0, 21.0], [200.0, 805.0], [300.0, 996.0], [400.0, 105.0], [500.0, 20.0]], "isOverall": false, "label": "PuchaseFlight/confirmation.php-313", "isController": false}, {"data": [[600.0, 8.0], [700.0, 9.0], [800.0, 14.0], [900.0, 10.0], [1000.0, 2.0], [1100.0, 6.0], [1200.0, 3.0], [1300.0, 6.0], [1400.0, 3.0], [1500.0, 4.0], [1600.0, 1.0], [1700.0, 4.0], [1800.0, 2.0], [1900.0, 1.0], [2000.0, 1.0], [2200.0, 3.0], [2300.0, 6.0], [2400.0, 7.0], [2500.0, 4.0], [2600.0, 9.0], [2800.0, 6.0], [2700.0, 10.0], [2900.0, 8.0], [3000.0, 4.0], [3100.0, 11.0], [3200.0, 7.0], [3300.0, 12.0], [3400.0, 8.0], [3500.0, 5.0], [3700.0, 1.0], [3600.0, 2.0], [3800.0, 3.0], [3900.0, 1.0], [4000.0, 1.0], [4200.0, 7.0], [4300.0, 2.0], [4100.0, 3.0], [4500.0, 6.0], [4600.0, 10.0], [4400.0, 4.0], [4700.0, 4.0], [4800.0, 6.0], [4900.0, 11.0], [5100.0, 6.0], [5000.0, 2.0], [5200.0, 4.0], [5300.0, 10.0], [5600.0, 5.0], [5500.0, 4.0], [5400.0, 7.0], [5800.0, 18.0], [5700.0, 5.0], [6000.0, 3.0], [6100.0, 5.0], [5900.0, 8.0], [6300.0, 7.0], [6200.0, 12.0], [6600.0, 4.0], [6500.0, 9.0], [6400.0, 4.0], [6900.0, 4.0], [6700.0, 3.0], [6800.0, 2.0], [7000.0, 5.0], [7100.0, 3.0], [7200.0, 4.0], [7400.0, 7.0], [7300.0, 5.0], [7600.0, 6.0], [7500.0, 5.0], [7700.0, 7.0], [7800.0, 6.0], [7900.0, 2.0], [8000.0, 4.0], [8100.0, 5.0], [8200.0, 3.0], [8400.0, 6.0], [8300.0, 2.0], [8500.0, 2.0], [100.0, 37.0], [200.0, 818.0], [300.0, 1005.0], [400.0, 107.0], [500.0, 15.0]], "isOverall": false, "label": "ChooseFlight/purchase.php-237", "isController": false}, {"data": [[600.0, 24.0], [700.0, 12.0], [800.0, 10.0], [900.0, 6.0], [1000.0, 10.0], [1100.0, 2.0], [1200.0, 5.0], [1300.0, 11.0], [1400.0, 3.0], [1500.0, 3.0], [1600.0, 1.0], [1700.0, 2.0], [1800.0, 2.0], [1900.0, 2.0], [2000.0, 2.0], [2100.0, 3.0], [2200.0, 4.0], [2300.0, 2.0], [2400.0, 4.0], [2500.0, 8.0], [2600.0, 8.0], [2700.0, 6.0], [2800.0, 10.0], [2900.0, 5.0], [3000.0, 9.0], [3100.0, 4.0], [3300.0, 9.0], [3200.0, 6.0], [3400.0, 4.0], [3500.0, 13.0], [3700.0, 8.0], [3600.0, 8.0], [3800.0, 5.0], [3900.0, 3.0], [4000.0, 3.0], [4300.0, 4.0], [4100.0, 3.0], [4400.0, 6.0], [4500.0, 4.0], [4600.0, 5.0], [4700.0, 6.0], [4800.0, 7.0], [4900.0, 5.0], [5100.0, 8.0], [5000.0, 5.0], [5200.0, 10.0], [5300.0, 11.0], [5400.0, 7.0], [5600.0, 6.0], [5500.0, 5.0], [5700.0, 7.0], [5800.0, 5.0], [6000.0, 6.0], [5900.0, 5.0], [6100.0, 1.0], [6300.0, 8.0], [6200.0, 7.0], [6500.0, 7.0], [6600.0, 7.0], [6400.0, 11.0], [6800.0, 9.0], [6700.0, 6.0], [6900.0, 7.0], [7000.0, 7.0], [7100.0, 7.0], [7400.0, 5.0], [7300.0, 6.0], [7200.0, 5.0], [7600.0, 3.0], [7500.0, 3.0], [7900.0, 3.0], [7800.0, 4.0], [7700.0, 4.0], [8100.0, 6.0], [8000.0, 5.0], [8300.0, 3.0], [8500.0, 4.0], [8400.0, 5.0], [8200.0, 3.0], [8600.0, 2.0], [200.0, 18.0], [300.0, 392.0], [400.0, 1411.0], [500.0, 160.0]], "isOverall": false, "label": "FindFlights/reserve.php-230", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 96.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5623.0, "series": [{"data": [[0.0, 5623.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 382.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1141.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 96.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 39.438172043010745, "minX": 1.706187E12, "maxY": 97.95029354207479, "series": [{"data": [[1.70618706E12, 97.95029354207479], [1.70618712E12, 82.85284090909084], [1.706187E12, 39.438172043010745]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group ( Load Testing )", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618712E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 268.5, "minX": 1.0, "maxY": 6211.0, "series": [{"data": [[7.0, 291.0], [8.0, 6084.0], [9.0, 5595.0], [10.0, 3519.5], [11.0, 1173.0], [12.0, 308.5], [13.0, 327.0], [14.0, 356.0], [15.0, 292.0], [16.0, 281.0], [18.0, 282.0], [19.0, 308.25], [20.0, 859.1666666666666], [21.0, 665.0], [22.0, 337.0], [23.0, 319.8], [24.0, 314.0], [25.0, 345.0], [26.0, 524.4285714285714], [27.0, 270.0], [28.0, 297.25], [29.0, 2139.0], [30.0, 892.6], [31.0, 444.33333333333337], [32.0, 349.0], [34.0, 331.0], [35.0, 879.8888888888889], [36.0, 409.0], [37.0, 559.4], [38.0, 293.5], [39.0, 358.3333333333333], [41.0, 2166.6666666666665], [40.0, 282.6666666666667], [42.0, 306.85714285714283], [43.0, 304.0], [44.0, 1796.0], [45.0, 284.0], [46.0, 589.7], [47.0, 1589.125], [48.0, 308.6], [49.0, 299.0], [50.0, 289.8], [51.0, 268.5], [52.0, 1042.4444444444443], [53.0, 306.5], [54.0, 1072.4], [55.0, 363.0], [56.0, 358.3333333333333], [57.0, 916.2222222222222], [58.0, 288.8], [59.0, 2444.6666666666665], [60.0, 2027.4444444444443], [61.0, 767.25], [62.0, 708.8333333333333], [63.0, 1328.3333333333333], [64.0, 1693.090909090909], [65.0, 857.6666666666667], [66.0, 311.0], [67.0, 295.09999999999997], [68.0, 1248.3333333333333], [69.0, 2335.666666666667], [70.0, 1917.7272727272727], [71.0, 287.25], [72.0, 302.2727272727273], [73.0, 497.625], [74.0, 312.2857142857143], [75.0, 1787.857142857143], [76.0, 1689.4444444444446], [77.0, 331.75000000000006], [78.0, 1957.8571428571431], [79.0, 1829.6666666666665], [80.0, 327.0], [81.0, 1802.5], [82.0, 1645.3846153846155], [83.0, 724.5], [84.0, 889.7391304347826], [85.0, 956.7777777777778], [86.0, 966.6666666666666], [87.0, 1647.8571428571427], [88.0, 1064.25], [89.0, 976.0], [90.0, 1398.076923076923], [91.0, 1426.2380952380952], [92.0, 348.5454545454545], [93.0, 327.0], [94.0, 902.8571428571429], [95.0, 2187.5714285714284], [96.0, 1506.0312500000005], [97.0, 339.4285714285714], [98.0, 1526.5], [99.0, 844.5], [100.0, 1120.599093997735], [1.0, 5325.0]], "isOverall": false, "label": "PuchaseFlight/confirmation.php-313", "isController": false}, {"data": [[91.86512605042019, 1108.287394957984]], "isOverall": false, "label": "PuchaseFlight/confirmation.php-313-Aggregated", "isController": false}, {"data": [[2.0, 5123.0], [3.0, 5884.0], [5.0, 3322.0], [6.0, 3329.0], [10.0, 387.5], [11.0, 281.5], [12.0, 603.5], [13.0, 333.0], [14.0, 343.6666666666667], [16.0, 571.5], [17.0, 279.0], [18.0, 271.0], [20.0, 659.6666666666666], [21.0, 304.6666666666667], [22.0, 277.0], [23.0, 660.5], [24.0, 2616.666666666667], [25.0, 307.0], [26.0, 711.8333333333334], [27.0, 327.3333333333333], [28.0, 690.2], [29.0, 1278.6666666666667], [30.0, 302.0], [31.0, 303.2], [32.0, 3043.5], [33.0, 1329.5], [34.0, 799.1428571428571], [35.0, 285.0], [36.0, 957.75], [37.0, 443.14285714285717], [38.0, 302.6666666666667], [39.0, 323.0], [40.0, 1917.625], [41.0, 603.8], [42.0, 340.0], [43.0, 300.3333333333333], [44.0, 855.1], [45.0, 996.0], [46.0, 1356.75], [47.0, 1594.3749999999998], [48.0, 285.5], [49.0, 1438.1666666666667], [50.0, 1204.375], [51.0, 1294.5714285714284], [52.0, 609.125], [53.0, 2006.6666666666667], [54.0, 1151.6666666666667], [55.0, 278.25], [56.0, 1876.8999999999999], [57.0, 2620.25], [58.0, 507.14285714285717], [59.0, 1063.4285714285716], [60.0, 972.375], [61.0, 2986.3333333333335], [62.0, 854.8333333333334], [63.0, 324.0], [64.0, 1390.0], [65.0, 652.4444444444443], [66.0, 1773.6], [67.0, 1548.4], [68.0, 328.6666666666667], [69.0, 303.0], [70.0, 1348.0], [71.0, 1771.4], [72.0, 2342.75], [73.0, 2049.5454545454545], [74.0, 1137.6666666666665], [75.0, 633.6428571428571], [76.0, 308.5], [77.0, 1961.6], [78.0, 854.5], [79.0, 304.7142857142857], [80.0, 344.8333333333333], [81.0, 332.6], [82.0, 374.40740740740745], [83.0, 917.5714285714286], [84.0, 1747.8], [85.0, 919.1874999999999], [86.0, 2222.5], [87.0, 983.1111111111111], [88.0, 1612.875], [89.0, 334.5], [90.0, 420.22727272727275], [91.0, 918.5652173913044], [92.0, 1157.909090909091], [93.0, 311.5], [94.0, 1551.666666666667], [95.0, 932.3333333333335], [96.0, 1020.5769230769232], [97.0, 526.7], [98.0, 840.9166666666667], [99.0, 1485.8461538461538], [100.0, 1067.0552112676057]], "isOverall": false, "label": "ChooseFlight/purchase.php-237", "isController": false}, {"data": [[91.33056822895078, 1063.4197428452926]], "isOverall": false, "label": "ChooseFlight/purchase.php-237-Aggregated", "isController": false}, {"data": [[3.0, 398.0], [4.0, 3122.0], [7.0, 3577.0], [8.0, 413.5], [9.0, 380.0], [10.0, 380.0], [11.0, 389.0], [12.0, 3393.5], [13.0, 409.0], [14.0, 1858.75], [15.0, 441.75], [16.0, 2436.333333333333], [17.0, 6211.0], [18.0, 852.0], [19.0, 2439.666666666667], [20.0, 409.85714285714283], [21.0, 793.6666666666666], [22.0, 421.6666666666667], [23.0, 425.2], [24.0, 449.6666666666667], [25.0, 1826.75], [26.0, 827.25], [27.0, 432.33333333333337], [28.0, 2974.5], [29.0, 1137.0], [30.0, 405.0], [31.0, 1595.0], [32.0, 446.0], [33.0, 412.0], [34.0, 1843.2], [35.0, 3027.8], [37.0, 1129.0], [36.0, 2331.0], [38.0, 1454.666666666667], [39.0, 1431.0000000000002], [40.0, 952.25], [41.0, 441.6666666666667], [42.0, 1959.0], [43.0, 2064.1], [44.0, 1864.25], [45.0, 399.0], [46.0, 408.2857142857143], [47.0, 946.75], [48.0, 452.7142857142857], [49.0, 388.4], [50.0, 1535.0], [51.0, 369.0], [52.0, 2781.666666666667], [53.0, 1565.8333333333335], [54.0, 465.2727272727272], [55.0, 430.0], [56.0, 1509.6666666666665], [57.0, 438.8], [58.0, 1279.3333333333333], [59.0, 2387.8], [60.0, 3135.0], [61.0, 484.25], [62.0, 901.153846153846], [63.0, 780.8333333333334], [64.0, 1652.0], [65.0, 1076.3333333333335], [66.0, 1327.142857142857], [67.0, 2023.4285714285713], [68.0, 412.4], [69.0, 396.25], [70.0, 771.5000000000001], [71.0, 4274.5], [72.0, 440.75], [73.0, 1383.0], [74.0, 1563.0], [75.0, 1109.9], [76.0, 421.5], [77.0, 1156.0], [78.0, 834.6315789473684], [79.0, 1232.8], [80.0, 808.6666666666667], [81.0, 2465.0], [82.0, 1072.7727272727273], [83.0, 1106.3846153846155], [84.0, 811.5384615384614], [85.0, 852.5624999999999], [86.0, 1549.1999999999998], [87.0, 463.2], [88.0, 1033.3], [89.0, 1207.142857142857], [90.0, 1624.7619047619046], [91.0, 1186.3125], [92.0, 1086.0], [93.0, 832.3], [94.0, 942.1666666666665], [95.0, 1170.7777777777778], [96.0, 833.6857142857143], [97.0, 1715.4615384615386], [98.0, 971.8888888888889], [99.0, 1149.0], [100.0, 1205.5700564971742]], "isOverall": false, "label": "FindFlights/reserve.php-230", "isController": false}, {"data": [[90.6491228070177, 1196.7882496940013]], "isOverall": false, "label": "FindFlights/reserve.php-230-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4351.516666666666, "minX": 1.706187E12, "maxY": 205133.41666666666, "series": [{"data": [[1.70618706E12, 205133.41666666666], [1.70618712E12, 70670.7], [1.706187E12, 14924.266666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70618706E12, 60421.98333333333], [1.70618712E12, 20817.283333333333], [1.706187E12, 4351.516666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618712E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 547.9280000000001, "minX": 1.706187E12, "maxY": 1326.9511784511774, "series": [{"data": [[1.70618706E12, 1084.8690758293856], [1.70618712E12, 1250.5665529010216], [1.706187E12, 694.6509433962268]], "isOverall": false, "label": "PuchaseFlight/confirmation.php-313", "isController": false}, {"data": [[1.70618706E12, 1054.7004689331766], [1.70618712E12, 1200.1637931034472], [1.706187E12, 547.9280000000001]], "isOverall": false, "label": "ChooseFlight/purchase.php-237", "isController": false}, {"data": [[1.70618706E12, 1180.8648018648007], [1.70618712E12, 1326.9511784511774], [1.706187E12, 842.2340425531913]], "isOverall": false, "label": "FindFlights/reserve.php-230", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618712E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 547.12, "minX": 1.706187E12, "maxY": 1326.2491582491584, "series": [{"data": [[1.70618706E12, 1083.9028436018941], [1.70618712E12, 1249.6843003412964], [1.706187E12, 694.1509433962262]], "isOverall": false, "label": "PuchaseFlight/confirmation.php-313", "isController": false}, {"data": [[1.70618706E12, 1053.6090269636602], [1.70618712E12, 1199.1327586206887], [1.706187E12, 547.12]], "isOverall": false, "label": "ChooseFlight/purchase.php-237", "isController": false}, {"data": [[1.70618706E12, 1180.3129370629406], [1.70618712E12, 1326.2491582491584], [1.706187E12, 841.6950354609929]], "isOverall": false, "label": "FindFlights/reserve.php-230", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618712E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.706187E12, "maxY": 128.14141414141417, "series": [{"data": [[1.70618706E12, 0.0], [1.70618712E12, 0.0], [1.706187E12, 0.0]], "isOverall": false, "label": "PuchaseFlight/confirmation.php-313", "isController": false}, {"data": [[1.70618706E12, 0.0], [1.70618712E12, 0.0], [1.706187E12, 0.0]], "isOverall": false, "label": "ChooseFlight/purchase.php-237", "isController": false}, {"data": [[1.70618706E12, 125.15093240093232], [1.70618712E12, 128.14141414141417], [1.706187E12, 121.45390070921987]], "isOverall": false, "label": "FindFlights/reserve.php-230", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618712E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 255.0, "minX": 1.706187E12, "maxY": 8856.0, "series": [{"data": [[1.70618706E12, 8856.0], [1.70618712E12, 8633.0], [1.706187E12, 7410.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70618706E12, 255.0], [1.70618712E12, 257.0], [1.706187E12, 258.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70618706E12, 3761.0], [1.70618712E12, 5126.8], [1.706187E12, 1642.3999999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70618706E12, 8071.600000000006], [1.70618712E12, 7455.979999999998], [1.706187E12, 7209.32]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70618706E12, 377.0], [1.70618712E12, 396.0], [1.706187E12, 365.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.70618706E12, 6422.0], [1.70618712E12, 6145.749999999988], [1.706187E12, 3079.5999999999967]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618712E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 168.0, "minX": 1.0, "maxY": 6364.5, "series": [{"data": [[2.0, 5839.5], [3.0, 392.0], [4.0, 6364.5], [7.0, 1173.0], [9.0, 413.0], [13.0, 430.5], [15.0, 370.0], [19.0, 356.0], [22.0, 400.5], [28.0, 359.0], [29.0, 384.5], [34.0, 356.0], [36.0, 330.5], [37.0, 414.0], [38.0, 428.0], [41.0, 371.0], [44.0, 433.0], [45.0, 382.0], [46.0, 385.0], [49.0, 310.0], [55.0, 369.0], [54.0, 345.0], [56.0, 361.5], [59.0, 305.5], [63.0, 381.0], [62.0, 385.5], [65.0, 359.0], [70.0, 356.0], [73.0, 388.0], [76.0, 359.0], [77.0, 411.5], [83.0, 381.0], [80.0, 366.5], [82.0, 367.0], [81.0, 374.0], [84.0, 385.0], [85.0, 389.0], [86.0, 373.0], [91.0, 361.0], [88.0, 395.0], [90.0, 374.0], [89.0, 395.0], [92.0, 394.0], [93.0, 378.0], [95.0, 396.0], [96.0, 383.5], [97.0, 375.0], [99.0, 390.0], [98.0, 384.0], [103.0, 367.0], [101.0, 373.0], [105.0, 375.5], [107.0, 363.0], [110.0, 340.0], [108.0, 355.5], [111.0, 360.5], [1.0, 5325.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[41.0, 168.0], [45.0, 231.0], [46.0, 179.5], [55.0, 288.0], [59.0, 173.0], [63.0, 175.0], [65.0, 174.0], [70.0, 180.0], [73.0, 173.0], [77.0, 179.5], [83.0, 179.0], [80.0, 174.0], [82.0, 279.0], [81.0, 296.0], [84.0, 185.0], [85.0, 275.0], [86.0, 189.0], [91.0, 293.5], [90.0, 203.0], [89.0, 239.5], [88.0, 243.5], [92.0, 225.0], [95.0, 179.5], [93.0, 345.0], [96.0, 176.0], [98.0, 249.5], [103.0, 170.0], [101.0, 239.5], [105.0, 179.0], [107.0, 171.0], [110.0, 322.0], [108.0, 234.0], [111.0, 305.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 111.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 168.0, "minX": 1.0, "maxY": 6364.5, "series": [{"data": [[2.0, 5839.5], [3.0, 390.0], [4.0, 6364.5], [7.0, 1173.0], [9.0, 413.0], [13.0, 430.5], [15.0, 369.0], [19.0, 356.0], [22.0, 400.5], [28.0, 359.0], [29.0, 384.5], [34.0, 356.0], [36.0, 329.5], [37.0, 411.0], [38.0, 427.0], [41.0, 371.0], [44.0, 433.0], [45.0, 379.0], [46.0, 385.0], [49.0, 310.0], [55.0, 368.0], [54.0, 344.0], [56.0, 361.5], [59.0, 304.5], [63.0, 378.0], [62.0, 385.5], [65.0, 359.0], [70.0, 356.0], [73.0, 388.0], [76.0, 359.0], [77.0, 411.5], [83.0, 381.0], [80.0, 365.0], [82.0, 367.0], [81.0, 373.0], [84.0, 384.0], [85.0, 389.0], [86.0, 372.5], [91.0, 361.0], [88.0, 394.5], [90.0, 371.0], [89.0, 394.0], [92.0, 394.0], [93.0, 378.0], [95.0, 395.0], [96.0, 383.5], [97.0, 375.0], [99.0, 390.0], [98.0, 383.0], [103.0, 367.0], [101.0, 373.0], [105.0, 375.5], [107.0, 361.0], [110.0, 339.0], [108.0, 355.5], [111.0, 358.0], [1.0, 5325.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[41.0, 168.0], [45.0, 231.0], [46.0, 179.0], [55.0, 288.0], [59.0, 173.0], [63.0, 175.0], [65.0, 174.0], [70.0, 179.0], [73.0, 173.0], [77.0, 179.5], [83.0, 179.0], [80.0, 174.0], [82.0, 279.0], [81.0, 296.0], [84.0, 185.0], [85.0, 275.0], [86.0, 189.0], [91.0, 293.5], [90.0, 203.0], [89.0, 239.5], [88.0, 243.5], [92.0, 225.0], [95.0, 179.5], [93.0, 345.0], [96.0, 176.0], [98.0, 249.5], [103.0, 170.0], [101.0, 239.5], [105.0, 179.0], [107.0, 171.0], [110.0, 322.0], [108.0, 234.0], [111.0, 305.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 111.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 7.2, "minX": 1.706187E12, "maxY": 85.83333333333333, "series": [{"data": [[1.70618706E12, 85.83333333333333], [1.70618712E12, 27.666666666666668], [1.706187E12, 7.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618712E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.706187E12, "maxY": 83.98333333333333, "series": [{"data": [[1.70618706E12, 83.98333333333333], [1.70618712E12, 29.0], [1.706187E12, 6.116666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70618706E12, 1.1833333333333333], [1.70618712E12, 0.3333333333333333], [1.706187E12, 0.08333333333333333]], "isOverall": false, "label": "429", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618712E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.706187E12, "maxY": 28.133333333333333, "series": [{"data": [[1.70618706E12, 27.933333333333334], [1.70618712E12, 9.533333333333333], [1.706187E12, 2.066666666666667]], "isOverall": false, "label": "ChooseFlight/purchase.php-237-success", "isController": false}, {"data": [[1.70618706E12, 0.5], [1.70618712E12, 0.13333333333333333], [1.706187E12, 0.016666666666666666]], "isOverall": false, "label": "ChooseFlight/purchase.php-237-failure", "isController": false}, {"data": [[1.70618706E12, 28.133333333333333], [1.70618712E12, 9.833333333333334], [1.706187E12, 2.3]], "isOverall": false, "label": "FindFlights/reserve.php-230-success", "isController": false}, {"data": [[1.70618706E12, 27.916666666666668], [1.70618712E12, 9.633333333333333], [1.706187E12, 1.75]], "isOverall": false, "label": "PuchaseFlight/confirmation.php-313-success", "isController": false}, {"data": [[1.70618706E12, 0.4666666666666667], [1.70618712E12, 0.06666666666666667], [1.706187E12, 0.05]], "isOverall": false, "label": "FindFlights/reserve.php-230-failure", "isController": false}, {"data": [[1.70618706E12, 0.21666666666666667], [1.70618712E12, 0.13333333333333333], [1.706187E12, 0.016666666666666666]], "isOverall": false, "label": "PuchaseFlight/confirmation.php-313-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618712E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.706187E12, "maxY": 83.98333333333333, "series": [{"data": [[1.70618706E12, 83.98333333333333], [1.70618712E12, 29.0], [1.706187E12, 6.116666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70618706E12, 1.1833333333333333], [1.70618712E12, 0.3333333333333333], [1.706187E12, 0.08333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618712E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

